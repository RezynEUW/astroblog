---
export interface Props {
  images: Array<{
    src: string;
    alt: string;
    caption?: string;
  }>;
  columns?: number;
  layout?: 'grid' | 'carousel';
}

const { images, columns = 2, layout = 'grid' } = Astro.props;
const gridClass = columns === 1 ? 'grid-cols-1' : columns === 3 ? 'md:grid-cols-3' : 'md:grid-cols-2';
const galleryId = `gallery-${Math.random().toString(36).substr(2, 9)}`;
---

{layout === 'grid' ? (
  <div class={`grid gap-4 my-8 grid-cols-1 ${gridClass}`} id={galleryId}>
    {images.map((image, index) => (
      <figure class="space-y-2 cursor-pointer" data-index={index}>
        <img 
          src={image.src} 
          alt={image.alt}
          class="w-full rounded-lg shadow-md hover:shadow-lg transition-shadow"
          loading="lazy"
        />
        {image.caption && (
          <figcaption class="text-sm text-zinc-600 dark:text-zinc-400 text-center">
            {image.caption}
          </figcaption>
        )}
      </figure>
    ))}
  </div>
) : (
  <div class="my-8 relative" id={galleryId}>
    <div class="relative overflow-hidden rounded-lg">
      <div class="flex transition-transform duration-300 ease-in-out carousel-track">
        {images.map((image, index) => (
          <div class="w-full flex-shrink-0 px-2" data-index={index}>
            <figure class="space-y-2">
              <img 
                src={image.src} 
                alt={image.alt}
                class="w-full rounded-lg shadow-md cursor-pointer"
                loading="lazy"
              />
              {image.caption && (
                <figcaption class="text-sm text-zinc-600 dark:text-zinc-400 text-center">
                  {image.caption}
                </figcaption>
              )}
            </figure>
          </div>
        ))}
      </div>
    </div>
    
    <!-- Carousel controls -->
    <button 
      class="carousel-prev absolute left-2 top-1/2 -translate-y-1/2 bg-white/80 dark:bg-zinc-800/80 backdrop-blur-sm rounded-full p-2 shadow-lg hover:bg-white dark:hover:bg-zinc-700 transition-colors"
      aria-label="Previous image"
    >
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
      </svg>
    </button>
    <button 
      class="carousel-next absolute right-2 top-1/2 -translate-y-1/2 bg-white/80 dark:bg-zinc-800/80 backdrop-blur-sm rounded-full p-2 shadow-lg hover:bg-white dark:hover:bg-zinc-700 transition-colors"
      aria-label="Next image"
    >
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
      </svg>
    </button>
    
    <!-- Dots indicator -->
    <div class="flex justify-center gap-2 mt-4">
      {images.map((_, index) => (
        <button 
          class={`w-2 h-2 rounded-full transition-colors carousel-dot ${index === 0 ? 'bg-zinc-600 dark:bg-zinc-400' : 'bg-zinc-300 dark:bg-zinc-600'}`}
          data-index={index}
          aria-label={`Go to image ${index + 1}`}
        />
      ))}
    </div>
  </div>
)}

<!-- Lightbox -->
<div id={`lightbox-${galleryId}`} class="fixed inset-0 z-50 hidden bg-black/90 backdrop-blur-sm">
  <button 
    class="close-lightbox absolute top-4 right-4 text-white hover:text-zinc-300 transition-colors"
    aria-label="Close lightbox"
  >
    <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
    </svg>
  </button>
  <button 
    class="prev-image absolute left-4 top-1/2 -translate-y-1/2 text-white hover:text-zinc-300 transition-colors"
    aria-label="Previous image"
  >
    <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
    </svg>
  </button>
  <button 
    class="next-image absolute right-4 top-1/2 -translate-y-1/2 text-white hover:text-zinc-300 transition-colors"
    aria-label="Next image"
  >
    <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
    </svg>
  </button>
  <div class="flex items-center justify-center h-full p-8">
    <img class="lightbox-image max-w-full max-h-full object-contain" src="" alt="" />
  </div>
  <p class="lightbox-caption absolute bottom-4 left-1/2 -translate-x-1/2 text-white text-center max-w-2xl px-4"></p>
</div>

<script define:vars={{ images, galleryId, layout }}>
  const gallery = document.getElementById(galleryId);
  const lightbox = document.getElementById(`lightbox-${galleryId}`);
  const lightboxImage = lightbox.querySelector('.lightbox-image');
  const lightboxCaption = lightbox.querySelector('.lightbox-caption');
  const closeBtn = lightbox.querySelector('.close-lightbox');
  const prevBtn = lightbox.querySelector('.prev-image');
  const nextBtn = lightbox.querySelector('.next-image');
  
  let currentIndex = 0;
  
  // Lightbox functions
  function openLightbox(index) {
    currentIndex = index;
    updateLightboxImage();
    lightbox.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
  }
  
  function closeLightbox() {
    lightbox.classList.add('hidden');
    document.body.style.overflow = '';
  }
  
  function updateLightboxImage() {
    const image = images[currentIndex];
    lightboxImage.src = image.src;
    lightboxImage.alt = image.alt;
    lightboxCaption.textContent = image.caption || '';
  }
  
  function nextImage() {
    currentIndex = (currentIndex + 1) % images.length;
    updateLightboxImage();
    if (layout === 'carousel') updateCarousel();
  }
  
  function prevImage() {
    currentIndex = (currentIndex - 1 + images.length) % images.length;
    updateLightboxImage();
    if (layout === 'carousel') updateCarousel();
  }
  
  // Carousel functions
  function updateCarousel() {
    if (layout === 'carousel') {
      const track = gallery.querySelector('.carousel-track');
      const dots = gallery.querySelectorAll('.carousel-dot');
      
      track.style.transform = `translateX(-${currentIndex * 100}%)`;
      
      dots.forEach((dot, index) => {
        if (index === currentIndex) {
          dot.classList.add('bg-zinc-600', 'dark:bg-zinc-400');
          dot.classList.remove('bg-zinc-300', 'dark:bg-zinc-600');
        } else {
          dot.classList.remove('bg-zinc-600', 'dark:bg-zinc-400');
          dot.classList.add('bg-zinc-300', 'dark:bg-zinc-600');
        }
      });
    }
  }
  
  // Event listeners for grid layout
  if (layout === 'grid') {
    gallery.querySelectorAll('figure').forEach((figure, index) => {
      figure.addEventListener('click', () => openLightbox(index));
    });
  }
  
  // Event listeners for carousel layout
  if (layout === 'carousel') {
    const track = gallery.querySelector('.carousel-track');
    const prevCarouselBtn = gallery.querySelector('.carousel-prev');
    const nextCarouselBtn = gallery.querySelector('.carousel-next');
    const dots = gallery.querySelectorAll('.carousel-dot');
    
    // Click on image opens lightbox
    track.querySelectorAll('img').forEach((img, index) => {
      img.addEventListener('click', () => openLightbox(index));
    });
    
    // Carousel navigation
    prevCarouselBtn?.addEventListener('click', () => {
      currentIndex = (currentIndex - 1 + images.length) % images.length;
      updateCarousel();
    });
    
    nextCarouselBtn?.addEventListener('click', () => {
      currentIndex = (currentIndex + 1) % images.length;
      updateCarousel();
    });
    
    // Dot navigation
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        currentIndex = index;
        updateCarousel();
      });
    });
    
    // Touch/swipe support
    let touchStartX = 0;
    let touchEndX = 0;
    
    track?.addEventListener('touchstart', (e) => {
      touchStartX = e.changedTouches[0].screenX;
    });
    
    track?.addEventListener('touchend', (e) => {
      touchEndX = e.changedTouches[0].screenX;
      handleSwipe();
    });
    
    function handleSwipe() {
      if (touchEndX < touchStartX - 50) {
        // Swipe left
        currentIndex = (currentIndex + 1) % images.length;
        updateCarousel();
      }
      if (touchEndX > touchStartX + 50) {
        // Swipe right
        currentIndex = (currentIndex - 1 + images.length) % images.length;
        updateCarousel();
      }
    }
  }
  
  // Lightbox event listeners
  closeBtn.addEventListener('click', closeLightbox);
  prevBtn.addEventListener('click', prevImage);
  nextBtn.addEventListener('click', nextImage);
  
  // Close on background click
  lightbox.addEventListener('click', (e) => {
    if (e.target === lightbox) closeLightbox();
  });
  
  // Keyboard navigation
  document.addEventListener('keydown', (e) => {
    if (lightbox.classList.contains('hidden')) return;
    
    if (e.key === 'Escape') closeLightbox();
    if (e.key === 'ArrowRight') nextImage();
    if (e.key === 'ArrowLeft') prevImage();
  });
</script>